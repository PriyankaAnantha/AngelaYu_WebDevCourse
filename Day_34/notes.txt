# Databases explained SQL vs NoSQL

### **Module Introduction: Data Persistence and Databases**

### **Key Concepts**

- **Data Persistence**: The ability to store data beyond a temporary state, ensuring it survives beyond server restarts.
- **Temporary Memory vs. Persistent Storage**: When data is stored in variables, it is temporary and can be wiped when the server is refreshed. To make data permanent, databases are used.

### **Example:**

- When building an API, blog posts stored in variables are wiped after restarting the server. This is because the data is stored in temporary memory, which is not persistent.

### **History of Storage Devices:**

- **Old Storage**: A memory disk from a computer museum in Bletchley Park stored only **4 MB** of data.
- **Modern Storage**: Despite technological advancements, the fundamental principles of storing data remain similar, involving magnetic polarity for data storage.


### **Types of Databases**

1. **SQL Databases (Structured Query Language)**
    - SQL databases are based on a structured format where data is organized into **tables**.
    - **Structure**: You define the table structure in advance, including fields like `name`, `email`, and `password`.
    - **Records**: Once a structure is defined, you add records, such as a new user with their details.
    
    **Relational Database**:
    
    - SQL databases are relational, meaning they can establish relationships between different tables (e.g., a **users** table and a **posts** table).
    - **Example**: A user can have multiple blog posts, and the posts can be linked back to that user through a foreign key relationship.
2. **NoSQL Databases (Not Only SQL)**
    - These are more flexible, allowing the structure of data to evolve without predefined **schemas** (The term "schema" refers to the organization of data as a blueprint of how the database is constructed.).
    - **Example**: A user document may have standard fields like `name` and `email`, but for one user, you might decide to add an extra field like `favorite food` without modifying other user records.
    
    **Advantages**:
    
    - Flexibility: You can change the structure on the fly by adding new attributes, which need not be true to all other samples.
    - Scalability: Easier to scale horizontally (adding more fields) and vertically (adding more records).

---

### **SQL vs. NoSQL Databases**

- **SQL (Structured)**:
    - **Uses tables** with a predefined structure.
    - Great for **relational data**.
    - Common SQL databases: **Oracle, PostgreSQL, MySQL, SQLite**.
- **NoSQL (Flexible)**:
    - Stores data in **document format**, often like JSON objects.
    - No need for a strict schema, allowing more flexibility in data storage.
    - Common NoSQL databases: **MongoDB, Redis, DynamoDB - by microsoft**.

---

### **Summary of Differences**

- **SQL**: Ideal for structured data and relational queries (e.g., when you have predefined relationships between data, such as users and their posts).
- **NoSQL**: Great for flexibility, scalability, and handling unstructured or semi-structured data. Suitable for fast-growing, dynamic projects where data structures may evolve over time.

---

